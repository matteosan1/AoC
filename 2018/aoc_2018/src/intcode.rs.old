pub mod intcode {
    use std::collections::HashMap;

    pub enum IntCodeState {
        Alive,
        Dead,
        Blocked,
    }
    
    pub enum IntCodeMode {
        Manual,
        Auto,
    }

    pub struct IntCode {
        code: HashMap::<usize, i32>,
        pointer: usize,
        relative_base: usize,
        name: usize,
        state: IntCodeState,
        mode: IntCodeMode, 
        //self.mem = channel
        //self.output = output
        //self.state = "alive"        
    }
    
    impl IntCode {
        pub fn new(name: usize, line: String, mode: IntCodeMode) -> Self {
            let mut code = HashMap::<usize, i32>::new();
            for (i, val) in line.split(",").enumerate() {
                code.insert(i, val.parse::<i32>().unwrap());
            }
            Self { code, pointer: 0,
                   relative_base: 0, name,
                   state: IntCodeState::Alive, mode}
        }

        fn get_modes(&self, modes: &mut[i32; 5]) {            
            let op = self.code[&self.pointer];
            for i in 1..5 {
                modes[i] = (op/i32::pow(10, i as u32))%10;
            }
        }
     
        fn get_val(&self, modes: &[i32; 5], offset: usize) -> usize {
            let idx = 0;
            if modes[offset] == 0 {
                let idx = self.code[&(&self.pointer + offset)];
            } else if modes[offset] == 1 {
                let idx = &self.pointer + offset;
            } else if modes[offset] == 2 {
                let idx = self.relative_base + self.code[&(&self.pointer + offset)] as usize;
            //if idx < 0:
            //raise ValueError(f"Negative memory bank {idx}")
            }
            
            idx
        }
        
        pub fn run(&mut self) {
            loop {
                let op = self.code[&self.pointer]%100;
                let mut modes = [0i32; 5];
                self.get_modes(&mut modes);
                //println!("{} {:?}", self.code[&self.pointer], modes);
                self.pointer += 1;
                if op == 99 {
                    self.state = IntCodeState::Dead;
                    break;
                } else if op == 1 {
                    let idx = self.get_val(&modes, 3);
                    let val1 = self.get_val(&modes, 1);
                    let val2 = self.get_val(&modes, 2);
                    self.code.insert(idx, self.code[&val1] + self.code[&val2]);
                    self.pointer += 4;
                } else if op == 2 {
                    let idx = self.get_val(&modes, 3);
                    let val1 = self.get_val(&modes, 1);
                    let val2 = self.get_val(&modes, 2);
                    self.code.insert(idx, self.code[&val1] * self.code[&val2]);
                    self.pointer += 4;
                }
//            elif op == 3:
//                if self.mode == "manual":
//                    a = input("Give input ")
//                    idx = self.get_val(modes, 1, True)
//                    self.code[idx] = int(a)
//                elif self.mode == "channel":
//                    if self.name not in self.mem or len(self.mem[self.name]) == 0:
//                        self.state = "blocked"
//                        break
//                    else:
//                        self.state = "alive"
//                        idx = self.get_val(modes, 1, True)
//                        val = self.mem[self.name].popleft()
//                        self.code[idx] = val
//                self.pointer += 2
//            elif op == 4:
//                if self.mode == "manual":
//                    print (f"val: {self.get_val(modes, 1)}")
//                elif self.mode == "channel":
//                    self.mem[self.output].append(self.get_val(modes, 1))
//                self.pointer += 2
//            elif op == 5:
//                val = self.get_val(modes, 1)
//                if self.get_val(modes, 1) != 0:
//                    self.pointer = self.get_val(modes, 2)
//                else:
//                    self.pointer += 3
//            elif op == 6:
//                if self.get_val(modes, 1) == 0:
//                    self.pointer = self.get_val(modes, 2)
//                else:
//                    self.pointer += 3
//            elif op == 7:
//                idx = self.get_val(modes, 3, True)
//                self.code[idx] = int(self.get_val(modes, 1) < self.get_val(modes, 2))
//                self.pointer += 4
//            elif op == 8:
//                idx = self.get_val(modes, 3, True)
//                self.code[idx] = int(self.get_val(modes, 1) == self.get_val(modes, 2))
//                self.pointer += 4
//            elif op == 9:
//                self.relative_base += self.get_val(modes, 1)
//                self.pointer += 2
//            else:
//                raise ValueError(f"Unknown instruction: {op}")
            }
        }
    }
}
//    def copy_code(self):
//        self.orig_code = copy.deepcopy(self.code)
//
//    def reset(self):
//        self.code = copy.deepcopy(self.orig_code)
//        self.pointer = 0
//        self.relative_base = 0


